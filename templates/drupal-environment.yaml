AWSTemplateFormatVersion: '2010-09-09'
Description: 'A Drupal Environment'
Parameters:
  DatabaseName:
    Type: String
    Description: 'Leave blank to use stack name. If a database with this name already exists it will be used rather
    than creating a new database.'
    Default: ''
  ProjectStack:
    Type: String
    Description: 'The Drupal Application stack name to use for this environment'
    MaxLength: 255
    MinLength: 1
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  GitBranch:
    Type: String
    Description: 'The Git branch this environment should pull from.'
    MinLength: 1
  GitRepository:
    Type: String
    Description: "The Github Repository to pull from. For example 'nemac/cohesivefire.nemac.org'"
    MinLength: 1
  GitOAuthToken:
    Type: String
    Description: 'The Github Oauth Token to use to access this repository. Not required if the repository is owned by nemac.'
    NoEcho: true
    Default: ''
  InstanceType:
    Type: String
    AllowedValues: ['t2.nano', 't2.micro', 't2.small', 't2.medium']
    Default: 't2.nano'
    Description: 'Enter t2.nano, t2.micro, t2.small, or t2.medium. Default is t2.nano.'
  MySQLInstanceStack:
    Type: String
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: 'drupal-mysql56'
    Description: 'The MySQL Instance stack name to use for this environment'
    MaxLength: 255
    MinLength: 1
  RetainDatabase:
    Type: String
    Default: 'no'
    Description: 'Keep the database when this environment is deleted.'
    AllowedValues: ['yes', 'no']
  SolutionStackName:
    Type: String
    Default: '64bit Amazon Linux 2016.03 v2.1.6 running Multi-container Docker 1.11.2 (Generic)'
    Description: 'The ElasticBeanstalk Solution Stack to use for this environment. Use `aws elasticbeanstalk list-available-solution-stacks | grep "Multi-container Docker"` to see valid options'
Conditions:
  HasDatabaseName: !Not [!Equals [!Ref 'DatabaseName', '']]
Resources:
  SingleInstanceConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    DependsOn: ['EC2InstanceProfile', 'EC2InstanceSecurityGroup', 'MySQLDatabase']
    Properties:
      SolutionStackName: !Ref 'SolutionStackName'
      ApplicationName: !Ref 'ProjectStack'
      Description: ''
      OptionSettings:
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: SingleInstance
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !GetAtt 'EC2InstanceProfile.Arn'
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: !Ref 'InstanceType'
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value: !Ref 'EC2InstanceSecurityGroup'
        - Namespace: aws:ec2:vpc
          OptionName: AssociatePublicIpAddress
          Value: 'true'
          ResourceName: AWSEBAutoScalingLaunchConfiguration
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'EC2KeyName'
          Value: 'cfn-admin'
          ResourceName: 'AWSEBAutoScalingLaunchConfiguration'
        - Namespace: aws:cloudformation:template:parameter
          OptionName: InstancePort
          Value: '80'
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          ResourceName: AWSEBAutoScalingGroup
          Value: !Join [',', [!ImportValue 'cfn-region-SubnetA', !ImportValue 'cfn-region-SubnetB']]
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          ResourceName: AWSEBSecurityGroup
          Value: !ImportValue 'cfn-region-VpcId'
        - Namespace: aws:elasticbeanstalk:cloudwatch:logs
          OptionName: DeleteOnTerminate
          Value: 'true'
        - Namespace: aws:elasticbeanstalk:cloudwatch:logs
          OptionName: RetentionInDays
          Value: '7'
        - Namespace: aws:elasticbeanstalk:cloudwatch:logs
          OptionName: StreamLogs
          Value: 'false'
        - Namespace: aws:elasticbeanstalk:command
          OptionName: BatchSize
          Value: '100'
        - Namespace: aws:elasticbeanstalk:command
          OptionName: BatchSizeType
          Value: 'Percentage'
        - Namespace: aws:elasticbeanstalk:command
          OptionName: IgnoreHealthCheck
          Value: 'false'
        - Namespace: aws:elasticbeanstalk:command
          OptionName: Timeout
          Value: '600'
        - Namespace: aws:elasticbeanstalk:control
          OptionName: DefaultSSHPort
          Value: '22'
        - Namespace: aws:elasticbeanstalk:control
          OptionName: LaunchTimeout
          Value: '0'
        - Namespace: aws:elasticbeanstalk:control
          OptionName: LaunchType
          Value: Migration
        - Namespace: aws:elasticbeanstalk:control
          OptionName: RollbackLaunchOnFailure
          Value: 'false'
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: elasticbeanstalk-role
        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: SystemType
          Value: 'enhanced'
        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: HealthCheckSuccessThreshold
          Value: 'Ok'
        - Namespace: aws:elasticbeanstalk:monitoring
          OptionName: Automatically Terminate Unhealthy Instances
          Value: 'true'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'APPLICATION'
          Value: !Ref 'ProjectStack'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'ASSET_STORE'
          Value: !ImportValue 'cfn-region-AssetStore'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'REGION'
          Value: !Ref 'AWS::Region'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'AWS_DEFAULT_REGION'
          Value: !Ref 'AWS::Region'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'DRUPAL_DB_HOSTNAME'
          Value: {"Fn::ImportValue": !Sub '${MySQLInstanceStack}-Hostname'  }
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'DRUPAL_DB_PORT'
          Value: {"Fn::ImportValue": !Sub '${MySQLInstanceStack}-Port' }
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'DRUPAL_DB_USERNAME'
          Value: !GetAtt MySQLDatabase.Username
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'DRUPAL_DB_PASSWORD'
          Value: !GetAtt MySQLDatabase.EncryptedPassword
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: 'DRUPAL_DB_NAME'
          Value: !If ['HasDatabaseName', !Ref 'DatabaseName', !Ref 'AWS::StackName']

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: 'EC2Role'
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allows EC2 instances to serve content over ports 80  and 443'
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
      VpcId: {"Fn::ImportValue": !Sub 'cfn-region-VpcId' }
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
      Path: /
#      TODO limit s3 bucket access to only current application.
      Policies:
        - PolicyName: !Sub '${ProjectStack}-${AWS::StackName}-ec2-role'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: BucketAccess
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::nemac-assets-${AWS::Region}'
                  - !Sub 'arn:aws:s3:::nemac-assets-${AWS::Region}/*'
              - Sid: XRayAccess
                Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Effect: Allow
                Resource: '*'

              - Sid: CloudWatchLogsAccess
                Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogStream'
                Effect: Allow
                Resource: [ 'arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*' ]
              - Sid: ECSAccess
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:Describe*'
                  - 'ecs:UpdateContainerInstancesState'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:StartTask'
                  - 'ecs:StopTask'
                  - 'ecs:Submit*'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Effect: Allow
                Resource: '*'
              - Sid: KMSKeyGrant
                Action: ['kms:Decrypt']
                Effect: Allow
                Resource: !ImportValue 'KMSKeyArn'
                Condition:
                  'StringEquals':
                    'kms:EncryptionContext:Application': !Ref 'ProjectStack'
                    'kms:EncryptionContext:Database': !If ['HasDatabaseName', !Ref 'DatabaseName', !Ref 'AWS::StackName']
  ElasticBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn: 'SingleInstanceConfigurationTemplate'
    Version: '1.0'
    Properties:
      ApplicationName: !Ref 'ProjectStack'
      Description: !Sub 'An environment for ${ProjectStack}'
      EnvironmentName: !Ref 'AWS::StackName'
      TemplateName: !Ref 'SingleInstanceConfigurationTemplate'
  MySQLDatabase:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-mysqldatabase'
      Application: !Ref 'ProjectStack'
      Database: !If ['HasDatabaseName', !Ref 'DatabaseName', !Ref 'AWS::StackName']
      Hostname: {"Fn::ImportValue": !Sub '${MySQLInstanceStack}-Hostname' }
      KMSKeyARN: !ImportValue 'KMSKeyArn'
      Port: {"Fn::ImportValue": !Sub '${MySQLInstanceStack}-Port' }
      RetainDatabase: !Ref 'RetainDatabase'
      Username: {"Fn::ImportValue": !Sub '${MySQLInstanceStack}-AdminUsername'  }
      Password: {"Fn::ImportValue": !Sub '${MySQLInstanceStack}-AdminPassword'  }
  CodePipeline:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: 'ElasticBeanstalkEnvironment'
    Properties:
      Application: !Ref 'ProjectStack'
      Environment: !Ref 'AWS::StackName'
      Branch: !Ref 'GitBranch'
      Repository: !Ref 'GitRepository'
      OAuthToken: !Ref 'GitOAuthToken'
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-codepipeline'
    Version: '1.0'
Outputs:
  DatabaseUser:
    Description: 'Mysql Database user'
    Value: !GetAtt 'MySQLDatabase.Username'
  Hostname:
    Description: 'EB Host Name'
    Value: !GetAtt 'ElasticBeanstalkEnvironment.EndpointURL'
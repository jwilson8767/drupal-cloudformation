AWSTemplateFormatVersion: '2010-09-09'
Description: 'Provisions IAM roles and network resources needed to provision other stacks in this Region.'
Parameters:
  ExistingArtifactBucket:
    Description: 'If an artifact bucket already exists, enter its name here. (Must be in this region)'
    Type: String
    Default: ''
  ExistingAssetBucket:
    Description: 'If an asset bucket already exists, enter its name here. (Must be in this region)'
    Type: String
    Default: ''
  ExistingSecretsBucket:
    Description: 'If a secrets bucket already exists, enter its name here. (Does not need to be in this region)'
    Type: String
    Default: ''
Conditions:
  NotHasExistingArtifactBucket: !Equals [!Ref 'ExistingArtifactBucket', '']
  NotHasExistingAssetBucket: !Equals [!Ref 'ExistingAssetBucket', '']
  NotHasExistingSecretsBucket: !Equals [!Ref 'ExistingSecretsBucket', '']
Resources:
  # The Artifact store bucket is used for artifacts created by CodePipeline and Elastic Beanstalk when pulling down/testing git repos.
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Condition: NotHasExistingArtifactBucket
    DeletionPolicy: 'Delete'
    Properties:
      BucketName: !Sub 'nemac-artifacts-${AWS::Region}'
  # The Asset Bucket is used for static assets that should be publicly accessible and be persisted between instances.
  AssetBucket:
    Type: AWS::S3::Bucket
    Condition: NotHasExistingAssetBucket
    DeletionPolicy: 'Retain'
    Properties:
      BucketName: !Sub 'nemac-assets-${AWS::Region}'
  AssetBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: AssetBucket
    Condition: NotHasExistingAssetBucket
    DeletionPolicy: 'Retain'
    Properties:
      Bucket: !Sub 'nemac-assets-${AWS::Region}'
      PolicyDocument:
        Statement:
        - Action: ['s3:GetObject']
          Effect: 'Allow'
          Principal: '*'
          Resource: !Sub 'arn:aws:s3:::nemac-assets-${AWS::Region}/*/public/*'
  SecretsBucket:
    Type: AWS::S3::Bucket
    Condition: NotHasExistingSecretsBucket
    DeletionPolicy: 'Retain'
    Properties:
      BucketName: !Sub 'nemac-secrets-${AWS::Region}'
  # VPC for all CloudFormation resources in this region.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.18.0.0/16'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: 'Name'
        Value: !Ref AWS::StackName
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainNameServers: [ "AmazonProvidedDNS" ]
  DHCPOptionsAttachment:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref DHCPOptions
      VpcId: !Ref VPC
  # The InternetGateway allows egress from the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties: {}
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: ['InternetGateway', 'VPC']
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  InternetGatewayRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: 'Application'
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public
  InternetGatewayRouteTableAssociation:
    Type: AWS::EC2::Route
    DependsOn: ['InternetGatewayAttachment','InternetGatewayRouteTable']
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref InternetGatewayRouteTable
  # One subnet per Availability Zone is sufficient for drupal web servers.
  SubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: [ VPC,  DHCPOptionsAttachment, InternetGatewayAttachment ]
    Properties:
      AvailabilityZone: { "Fn::Select" : ["0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]}
      CidrBlock: '172.18.0.0/22'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: ['InternetGateway', 'SubnetA']
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref SubnetA
  SubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: [ VPC,  DHCPOptionsAttachment, InternetGatewayAttachment ]
    Properties:
      AvailabilityZone: { "Fn::Select" : ["1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]}
      CidrBlock: '172.18.4.0/22'
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref VPC
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: ['InternetGateway', 'SubnetB']
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref SubnetB
  # Defines Security Groups RDS can create endpoints in.
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: ['SubnetA', 'SubnetB']
    Properties:
      DBSubnetGroupDescription: 'default'
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
      Tags: []
Outputs:
  ArtifactStore:
    Description: 'S3 Bucket name for artifacts'
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactStore'
    Value: !Sub 'elasticbeanstalk-${AWS::Region}-${AWS::AccountId}'
  AssetStore:
    Description: 'S3 Bucket name'
    Export:
      Name: !Sub '${AWS::StackName}-AssetStore'
    Value: !If ['NotHasExistingAssetBucket',!Sub 'nemac-assets-${AWS::Region}',!Ref ExistingAssetBucket]
  AssetStoreUrl:
    Description: 'Url to the Asset Store S3 Bucket'
    Export:
      Name: !Sub '${AWS::StackName}-AssetStoreUrl'
    Value: !If ['NotHasExistingAssetBucket', !GetAtt 'AssetBucket.DomainName', !Sub 'https://s3.amazonaws.com/${ExistingAssetBucket}/']
  SecretsStore:
    Description: 'S3 Bucket name'
    Export:
      Name: !Sub '${AWS::StackName}-SecretsStore'
    Value: !If ['NotHasExistingSecretsBucket',!Sub 'nemac-secrets-${AWS::Region}',!Ref ExistingAssetBucket]
  VpcId:
    Description: 'VpcId'
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
    Value: !Ref VPC
  RDSSubnetGroup:
    Description: 'RDS Subnet Group Id'
    Export:
      Name: !Sub '${AWS::StackName}-RDSSubnetGroup'
    Value: !Ref RDSSubnetGroup
  SubnetA:
    Description: 'Subnet ID of Subnet A'
    Export:
      Name: !Sub '${AWS::StackName}-SubnetA'
    Value: !Ref SubnetA
  SubnetB:
    Description: 'Subnet ID of Subnet B'
    Export:
      Name: !Sub '${AWS::StackName}-SubnetB'
    Value: !Ref SubnetB

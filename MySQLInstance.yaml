AWSTemplateFormatVersion: '2010-09-09'
Description: A MySQL RDS instance which can be used by other stacks
Parameters:
  AdminPassword: {AllowedPattern: '[a-zA-Z0-9]*', ConstraintDescription: must contain
      only alphanumeric characters., Description: The database admin account password.
      Remember to save this., MaxLength: '41', MinLength: '8', NoEcho: 'true', Type: String}
  AdminUsername: {AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*', ConstraintDescription: must
      begin with a letter and contain only alphanumeric characters., Default: admin,
    Description: The database admin account username, MaxLength: '16', MinLength: '1',
    NoEcho: 'true', Type: String}
  AllocatedStorage: {Default: 10, Description: Storage for the RDS instance in GB,
    MaxValue: 6144, MinValue: 5, Type: Number}
  InstanceType:
    AllowedValues: [db.t2.micro, db.t2.small, db.t2.medium, db.t2.large]
    Default: db.t2.micro
    Description: 'Choose an RDS instance size. Default: db.t2.micro.'
    Type: String
  MySQLPort: {Default: 3306, Type: Number}
  MySQLVersion:
    AllowedValues: [5.6.19a, 5.6.19b, 5.6.21, 5.6.21b, 5.6.22, 5.6.23, 5.6.27, 5.6.29,
      5.6.34, 5.7.10, 5.7.11, 5.7.16]
    Default: 5.6.34
    Description: 'Storage for the RDS instance in GB. Use `aws rds describe-db-engine-versions
      --engine=mysql --region=REGION` to see versions'
    Type: String
Outputs:
  AdminPassword:
    Description: KMS encrypted value of Admin Password (Base64 encoded)
    Export:
      Name: !Sub '${AWS::StackName}-AdminPassword'
    Value:
      !GetAtt "EncryptedCredentials.encryptedPassword"
  AdminUsername:
    Description: KMS encrypted value of Admin Username (Base64 encoded)
    Export:
      Name: !Sub '${AWS::StackName}-AdminUsername'
    Value:
      !GetAtt "EncryptedCredentials.encryptedUsername"
  EC2InstanceSecurityGroup:
    Description: The SecurityGroupID for EC2Instances that should be allowed to contact
      this MySQL Instance
    Export:
      Name: !Sub '${AWS::StackName}-EC2InstanceSecurityGroup'
    Value:
      !GetAtt "EC2InstanceSecurityGroup.GroupId"
  Hostname:
    Description: Hostname of the RDS Instance
    Export:
      Name: !Sub '${AWS::StackName}-Hostname'
    Value:
      !GetAtt "RDSInstance.Endpoint.Address"
  MySQLDatabaseResource:
    Description: The ARN for the Lambda-backed custom MySQL Database resource
    Export:
      Name: !Sub '${AWS::StackName}-MySQLDatabaseResource'
    Value:
      !GetAtt "LambdaMySQLDatabaseResource.Arn"
  Port:
    Description: Port that MySQL listens on the RDS Instance
    Export:
      Name: !Sub '${AWS::StackName}-Port'
    Value:
      !GetAtt "RDSInstance.Endpoint.Port"
Resources:
  EC2InstanceSecurityGroup:
    Properties:
      GroupDescription: 'Allows EC2 instances to connect to MySQL Instance'
      Tags:
      - Key: Name
        Value: !Sub 'cf-rds-ec2-${AWS::StackName}'
      VpcId: {'Fn::ImportValue': !Sub 'cf-vpc-${AWS::Region}-VpcId'}
    Type: AWS::EC2::SecurityGroup
  EC2InstanceSecurityGroupEgress:
    Properties:
      DestinationSecurityGroupId:
        !GetAtt "RDSInstanceSecurityGroup.GroupId"
      FromPort: '0'
      GroupId:
        !GetAtt "EC2InstanceSecurityGroup.GroupId"
      IpProtocol: 'tcp'
      ToPort: '65535'
    Type: 'AWS::EC2::SecurityGroupEgress'
  EncryptedCredentials:
    Properties:
      KMSKeyARN: 'arn:aws:kms:us-east-1:104538610210:key/0ba99da8-9c78-401e-84f1-8554f7b55b71'
      Password: !Ref 'AdminPassword'
      ServiceToken:
        !GetAtt "LambdaEncryptCredentials.Arn"
      Username: !Ref 'AdminUsername'
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
  LambdaEncryptCredentials:
    Properties:
      Code:
        ZipFile: |
          import base64
          import boto3
          import cfnresponse
          def handler(event, context):
              if event['RequestType'] == 'Delete':
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
              client = boto3.client('kms')
              encrypted_username = client.encrypt(
                  KeyId=event['ResourceProperties']['KMSKeyARN'],
                  Plaintext=event['ResourceProperties']['Username']
              )
              encrypted_password = client.encrypt(
                  KeyId=event['ResourceProperties']['KMSKeyARN'],
                  Plaintext=event['ResourceProperties']['Password']
              )
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                  'encryptedUsername': base64.b64encode(encrypted_username['CiphertextBlob']),
                  'encryptedPassword': base64.b64encode(encrypted_password['CiphertextBlob'])
              }, {})
      Handler: index.handler
      Role:
        !GetAtt "LambdaRole.Arn"
      Runtime: python2.7
      Timeout: '60'
    Type: AWS::Lambda::Function
  LambdaMySQLDatabaseResource:
    Properties:
      Code: {S3Bucket: nemac-cloudformation, S3Key: MySQLDatabaseResource.zip}
      Handler: index.handler
      Role:
        !GetAtt "LambdaRole.Arn"
      Runtime: python2.7
      Timeout: '60'
    Type: AWS::Lambda::Function
  LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: ['kms:Decrypt', 'kms:DescribeKey', 'kms:Encrypt', 'kms:ListKeys']
            Effect: Allow
            Resource: ['arn:aws:kms:us-east-1:104538610210:key/0ba99da8-9c78-401e-84f1-8554f7b55b71']
          - Action: ['ec2:CreateNetworkInterface', 'ec2:DeleteNetworkInterface', 'ec2:DescribeNetworkInterfaces']
            Effect: Allow
            Resource: ['*']
          - Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: !Sub 'cf-lambda-role-policy-${AWS::StackName}'
      RoleName: !Sub 'cf-lambda-role-${AWS::StackName}'
    Type: AWS::IAM::Role
  RDSInstance:
    DeletionPolicy: Delete
    DependsOn: [RDSInstanceSecurityGroup]
    Properties:
      AllocatedStorage: !Ref 'AllocatedStorage'
      AutoMinorVersionUpgrade: true
      DBInstanceClass: !Ref 'InstanceType'
      DBSubnetGroupName: {'Fn::ImportValue': !Sub 'cf-vpc-${AWS::Region}-RDSSubnetGroup'}
      Engine: MySQL
      EngineVersion: !Ref 'MySQLVersion'
      MasterUserPassword: !Ref 'AdminPassword'
      MasterUsername: !Ref 'AdminUsername'
      MultiAZ: true
      Port: !Ref 'MySQLPort'
      PubliclyAccessible: true
      VPCSecurityGroups:
      - !GetAtt "RDSInstanceSecurityGroup.GroupId"
    Type: AWS::RDS::DBInstance
  RDSInstanceSecurityGroup:
    Properties:
      GroupDescription: Allows EC2 instances to connect to MySQL Instance
      SecurityGroupEgress:
      - {CidrIp: 0.0.0.0/0, IpProtocol: '-1'}
      Tags:
      - Key: Name
        Value: !Sub 'cf-rds-${AWS::StackName}'
      VpcId: {'Fn::ImportValue': !Sub 'cf-vpc-${AWS::Region}-VpcId'}
    Type: AWS::EC2::SecurityGroup
  RDSInstanceSecurityGroupIngress:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: !Ref 'MySQLPort'
      GroupId: !GetAtt "RDSInstanceSecurityGroup.GroupId"
      IpProtocol: tcp
      ToPort: !Ref 'MySQLPort'
    Type: 'AWS::EC2::SecurityGroupIngress'
